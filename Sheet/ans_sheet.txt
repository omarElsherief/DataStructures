__________________________________________________________________________
1-
int Stack::Bottom()
{
    if (isEmpty())
        return -1;
    Node *temp = top;
    while (temp->next != NULL)
    {
        temp = temp->next;
    }
    return temp->data;
}

__________________________________________________________________________
2-
int Stack::Size()
{
    int size = 0;
    if (isEmpty())
        return 0;
    size++;
    Node *temp = top;
    while (temp->next != NULL)
    {
        temp = temp->next;
        size++;
    }
    return size;
}


__________________________________________________________________________
3-
int Stack::Top()
{
    return top->data;
}


__________________________________________________________________________
4-
Stack Stack::Copy()
{
    Stack st;
    int size = Size();
    int arr[size];
    int index = 0;
    if (isEmpty())
        return st;
    Node *temp = top;
    arr[index++] = temp->data;
    while (temp->next != NULL)
    {
        temp = temp->next;
        arr[index++] = temp->data;
    }
    for (int i = size - 1; i >= 0; i--)
    {
        st.push(arr[i]);
    }
    return st;
}

__________________________________________________________________________
5-
void Stack::Delete()
{
    while (top)
    {
        Node *temp = top;
        top = top->next;
        delete temp;
    }
    
}



__________________________________________________________________________
6-
void Stack::display()
{
    Node *temp = top;
    if (isEmpty())
    {
        cout << "STack is empty \n";
    }
    cout << "Items in the stack [ ";
    while (temp != NULL)
    {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << "]\n";
}


__________________________________________________________________________
(7)
----------------------------------------------------------------------------
1
-

-
int getFront()
    {
        if(isEmpty)
            return -1;
        return arr[front];
    }
----------------------------------------------------------------------------
2
-

-
int getSize(){
        return len;
    }
----------------------------------------------------------------------------
3
-

-
int getRear()
    {
        assert(!isEmpty());
        return arr[rear];
    }
----------------------------------------------------------------------------
4
-

-

----------------------------------------------------------------------------
5
-

-
Queue::~Queue()
{
    size = 0;
    delete [] entry;
    capacity = 0;
    front = 0;
    rear = -1;
}
----------------------------------------------------------------------------
6
-

-
void Queue::Traverse()
{
    for (int i = front; i != rear; i = (i + 1) % capacity)
    {
        cout << arr[i] << " ";
    }
    cout << arr[rear] << "\n";
}
----------------------------------------------------------------------------


----------------------------------------------------------------------------


----------------------------------------------------------------------------

----------------------------------------------------------------------------

__________________________________________________________________________
8-
void Linkedlist::Destroy()
{
    while (head)
    {
        Node *temp = head;
        head = head->next;
        delete temp;
    }
}
__________________________________________________________________________
9-


__________________________________________________________________________
10-


__________________________________________________________________________
11-


__________________________________________________________________________
12-
void Linkedlist::insert(int newv, int index)
{
    if (index < 0 || index > this->mySize)
    {
        cerr << "Illegal location to insert -- " << index << endl;
        return;
    }
    mySize++;
    Node *newN = new Node(newv);
    if (index == 0)
    {
        newN->next = head;
        head = newN;
        return;
    }
    Node *temp = head;
    for (int i = 0; i < index - 2; i++)
    {
        temp = temp->next;
    }
    newN->next = temp->next;
    temp->next = newN;
}
__________________________________________________________________________
13- hard
__________________________________________________________________________

__________________________________________________________________________

__________________________________________________________________________
